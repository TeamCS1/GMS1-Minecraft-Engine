<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>900</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//set the skybox textures and create a model for each part
//lifted and altered from an example created by Yourself (an old GMC companion)

tex_n = background_get_texture(bg_sky_n);
tex_e = background_get_texture(bg_sky_e);
tex_s = background_get_texture(bg_sky_s);
tex_w = background_get_texture(bg_sky_w);
tex_u = background_get_texture(bg_sky_u);
tex_d = background_get_texture(bg_sky_d);

skybox_n = d3d_model_create();
    d3d_model_primitive_begin(skybox_n,pr_trianglestrip);
    d3d_model_vertex_texture(skybox_n,-5, -5,  5,0,0);
    d3d_model_vertex_texture(skybox_n, 5, -5,  5,1,0);
    d3d_model_vertex_texture(skybox_n,-5, -5, -5,0,1);
    d3d_model_vertex_texture(skybox_n, 5, -5, -5,1,1);
    d3d_model_primitive_end(skybox_n);

skybox_e = d3d_model_create();
    d3d_model_primitive_begin(skybox_e,pr_trianglestrip);
    d3d_model_vertex_texture(skybox_e, 5, -5,  5,0,0);
    d3d_model_vertex_texture(skybox_e, 5,  5,  5,1,0);
    d3d_model_vertex_texture(skybox_e, 5, -5, -5,0,1);
    d3d_model_vertex_texture(skybox_e, 5,  5, -5,1,1);
    d3d_model_primitive_end(skybox_e);

skybox_s = d3d_model_create();
    d3d_model_primitive_begin(skybox_s,pr_trianglestrip);
    d3d_model_vertex_texture(skybox_s, 5, 5,  5,0,0);
    d3d_model_vertex_texture(skybox_s,-5, 5,  5,1,0);
    d3d_model_vertex_texture(skybox_s, 5, 5, -5,0,1);
    d3d_model_vertex_texture(skybox_s,-5, 5, -5,1,1);
    d3d_model_primitive_end(skybox_s);

skybox_w = d3d_model_create();
    d3d_model_primitive_begin(skybox_w,pr_trianglestrip);
    d3d_model_vertex_texture(skybox_w,-5,  5,  5,0,0);
    d3d_model_vertex_texture(skybox_w,-5, -5,  5,1,0);
    d3d_model_vertex_texture(skybox_w,-5,  5, -5,0,1);
    d3d_model_vertex_texture(skybox_w,-5, -5, -5,1,1);
    d3d_model_primitive_end(skybox_w);

skybox_u = d3d_model_create();
    d3d_model_primitive_begin(skybox_u,pr_trianglestrip);
    d3d_model_vertex_texture(skybox_u,-5,  5,  5,0,0);
    d3d_model_vertex_texture(skybox_u, 5,  5,  5,1,0);
    d3d_model_vertex_texture(skybox_u,-5, -5,  5,0,1);
    d3d_model_vertex_texture(skybox_u, 5, -5,  5,1,1);
    d3d_model_primitive_end(skybox_u);
    
skybox_d = d3d_model_create();
    d3d_model_primitive_begin(skybox_d,pr_trianglestrip);
    d3d_model_vertex_texture(skybox_d, 5, -5, -5,1,0);
    d3d_model_vertex_texture(skybox_d, 5,  5, -5,1,1);
    d3d_model_vertex_texture(skybox_d,-5, -5, -5,0,0);
    d3d_model_vertex_texture(skybox_d,-5,  5, -5,0,1);
    d3d_model_primitive_end(skybox_d);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if the camera exists, draw the skybox for it
if (instance_exists(obj_camera)){
    //reset draw stuff with a custom script
    draw_reset();
    
    //set hidden to false, which will let the sky draw behind everything
    d3d_set_hidden(false);
    
    //turn off lighting
    d3d_set_lighting(false);
    
    //disable texture repeating to make sure we don't get seams on the edges of the box parts
    texture_set_repeat(false);
    
    //disable fog - another custom script
    d3d_fog_enable(false);
    
    //use 3d transforms to move the skybox with the camera
    d3d_transform_set_translation(obj_camera.x,obj_camera.y,obj_camera.z);
    d3d_model_draw(skybox_n,0,0,0,tex_n);
    d3d_model_draw(skybox_e,0,0,0,tex_e);
    d3d_model_draw(skybox_s,0,0,0,tex_s);
    d3d_model_draw(skybox_w,0,0,0,tex_w);
    d3d_model_draw(skybox_u,0,0,0,tex_u);
    d3d_model_draw(skybox_d,0,0,0,tex_d);
    d3d_transform_set_identity();
    
    //reset 3d drawing settings
    d3d_set_lighting(true);
    d3d_set_hidden(true);
    d3d_fog_enable(true);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
